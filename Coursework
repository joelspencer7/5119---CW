import java.io.File;
		import java.io.FileNotFoundException;
		import java.util.Scanner;
	

		public class CVEData {

			public final String SEP = ",";
			
			public String cve_id;
			public String mod_date;
			public String pub_date; 
			public String cvss;
			public String cwe_code;
			public String cwe_name;
			public String summary;
			public String access_authentication;
			public String access_complexity;
			public String access_vector;
			public String impact_availability;
			public String impact_confidentiality;
			public String impact_integrity;
			public String vulnerable_product;
			public String vendor;
			
			public CVEData(String csvString)
			{
				String[]csvParts = csvString.split(SEP, -1);
				int idx=0;
				cve_id= csvParts[idx++];
				mod_date= csvParts[idx++];
				pub_date= csvParts[idx++]; 
				cvss= csvParts[idx++];
				cwe_code= csvParts[idx++];
				cwe_name= csvParts[idx++];
				summary= csvParts[idx++];
				access_authentication= csvParts[idx++];
				access_complexity= csvParts[idx++];
				access_vector= csvParts[idx++];
				impact_availability= csvParts[idx++];
				impact_confidentiality= csvParts[idx++];
				impact_integrity= csvParts[idx++];
				vulnerable_product= csvParts[idx++];
				vendor= csvParts[idx++];
				
				
			}
			
			public String toCSVString()
			{
				return cve_id+SEP+mod_date+SEP+pub_date+SEP+cvss+SEP+cwe_code+
				SEP+cwe_name+SEP+summary+SEP+access_authentication+SEP+access_complexity+
				SEP+access_vector+SEP+impact_availability+SEP+impact_confidentiality+SEP+impact_integrity;
			}
			
			public static void main(String[] args) throws FileNotFoundException 
			{
				CVEData[] cve = readFile("C:\\Users\\CSMJTAYL\\OneDrive - Liverpool John Moores University");
				outputCVEs(cve);
			}
			
			
			public static CVEData[] readFile(String filename) throws FileNotFoundException
			{
				CVEData[] cves = new CVEData[10];
				File csvFile = new File(filename);
				Scanner csvScan = new Scanner(csvFile);
				
				csvScan.nextLine(); // read header
				int idx = 0;
				while (csvScan.hasNextLine()) 
				{
					String line = csvScan.nextLine();
					CVEData cve = new CVEData(line);
					cves[idx] = cve;
					idx++;
				}
				
				csvScan.close();
				return cves;
			}
			
		
			private static void outputCVEs(CVEData[] cve) 
			{
				for (int i=0; i<cve.length; i++)
				{
					CVEData currentCVE = cve[i];
					if (currentCVE != null)
					{
						System.out.println(currentCVE.cve_id+": ("+currentCVE.pub_date+") "+currentCVE.cwe_name);
						
			public class menuSystem {
				public static void menuSys() {
					System.out.println("Welcome to the file reader");
					System.out.println();
					System.out.println("Please select your option:");
	}
					}
				}
			}
			
		}
package menu;


public class mn {

	public static void main(String[] args) {
		System.out.println("Welcome to the file reader");
		System.out.println();
		System.out.println("Please select your option:");
		System.out.println("1) View all"+
		"2) View vulnerability score"+
		"3) View vendor name and product"+
		"4) View CVE vendor with product and weakness"+
		"5) View highest CVE number with dates"+
		"6) View common vulnerability scores"+
		"7) View records in CVA dataset"+
		"8) View all incomplete records"+
		"9) Add data entry");
		
		Scanner scan = new Scanner(System.in);
		String option = scan.nextLine();
			if (option == "1") {
			System.out.println(currentCVE.cve_id + currentCVE.mod_date + currentCVE.pub_date + currentCVE.cvss + currentCVE.cwe_code + currentCVE.cwe_name + currentCVE.summary + currentCVE.access_authentication + currentCVE.access_complexity + currentCVE.access_vector + currentCVE.impact.availability + currentCVE.impact_confidentiality + currentCVE.impact_integrity + currentCVE.vulnerable_product + currentCVE.vendor);
			}
			else if (option == "2"){
				System.out.println(currentCVE.cvss);
			}			
			else if (option == "3") {
				System.out.println(currentCVE.cve_id + currentCVE.vendor + currentCVE.vulnerable_product);
				}
			else if (option == "4") {
				System.out.println(currentCVE.cve_id + currentCVE.vendor + currentCVE.vulnerable_product + currentCVE.cwe_code);
			}
			else if (option == "5") {
				System.out.println(currentCVE.cve_id + currentCVE.vendor + currentCVE.pub_date);
			}
	//		else if (option == "6") {
	//			System.out.println(currentCVE.cve_id + currentCVE.cvss + currentCVE.vendor + currentCVE.cwe_code + );
	//		}
			else if (option == "7") {
				System.out.println();
			}
		}
		
		
	

	}

		

	

